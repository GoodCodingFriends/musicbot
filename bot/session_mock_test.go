// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bot

import (
	"github.com/acomagu/musicbot/soundplayer"
	"sync"
)

var (
	lockSessionMockChannelMessageSend       sync.RWMutex
	lockSessionMockChannelVoiceJoin         sync.RWMutex
	lockSessionMockGetMe                    sync.RWMutex
	lockSessionMockHasSendMessagePermission sync.RWMutex
	lockSessionMockUpdateStatus             sync.RWMutex
	lockSessionMockUser                     sync.RWMutex
	lockSessionMockVoiceStates              sync.RWMutex
)

// SessionMock is a mock implementation of Session.
//
//     func TestSomethingThatUsesSession(t *testing.T) {
//
//         // make and configure a mocked Session
//         mockedSession := &SessionMock{
//             ChannelMessageSendFunc: func(guildID string, channelID string) (*Message, error) {
// 	               panic("mock out the ChannelMessageSend method")
//             },
//             ChannelVoiceJoinFunc: func(guildID string, channelID string, mute bool, deaf bool) (soundplayer.VC, error) {
// 	               panic("mock out the ChannelVoiceJoin method")
//             },
//             GetMeFunc: func() (*User, error) {
// 	               panic("mock out the GetMe method")
//             },
//             HasSendMessagePermissionFunc: func(userID string, channelID string) bool {
// 	               panic("mock out the HasSendMessagePermission method")
//             },
//             UpdateStatusFunc: func(idle int, game string) error {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UserFunc: func(userID string) (*User, error) {
// 	               panic("mock out the User method")
//             },
//             VoiceStatesFunc: func(guildID string) ([]*VoiceState, error) {
// 	               panic("mock out the VoiceStates method")
//             },
//         }
//
//         // use mockedSession in code that requires Session
//         // and then make assertions.
//
//     }
type SessionMock struct {
	// ChannelMessageSendFunc mocks the ChannelMessageSend method.
	ChannelMessageSendFunc func(guildID string, channelID string) (*Message, error)

	// ChannelVoiceJoinFunc mocks the ChannelVoiceJoin method.
	ChannelVoiceJoinFunc func(guildID string, channelID string, mute bool, deaf bool) (soundplayer.VC, error)

	// GetMeFunc mocks the GetMe method.
	GetMeFunc func() (*User, error)

	// HasSendMessagePermissionFunc mocks the HasSendMessagePermission method.
	HasSendMessagePermissionFunc func(userID string, channelID string) bool

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(idle int, game string) error

	// UserFunc mocks the User method.
	UserFunc func(userID string) (*User, error)

	// VoiceStatesFunc mocks the VoiceStates method.
	VoiceStatesFunc func(guildID string) ([]*VoiceState, error)

	// calls tracks calls to the methods.
	calls struct {
		// ChannelMessageSend holds details about calls to the ChannelMessageSend method.
		ChannelMessageSend []struct {
			// GuildID is the guildID argument value.
			GuildID string
			// ChannelID is the channelID argument value.
			ChannelID string
		}
		// ChannelVoiceJoin holds details about calls to the ChannelVoiceJoin method.
		ChannelVoiceJoin []struct {
			// GuildID is the guildID argument value.
			GuildID string
			// ChannelID is the channelID argument value.
			ChannelID string
			// Mute is the mute argument value.
			Mute bool
			// Deaf is the deaf argument value.
			Deaf bool
		}
		// GetMe holds details about calls to the GetMe method.
		GetMe []struct {
		}
		// HasSendMessagePermission holds details about calls to the HasSendMessagePermission method.
		HasSendMessagePermission []struct {
			// UserID is the userID argument value.
			UserID string
			// ChannelID is the channelID argument value.
			ChannelID string
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Idle is the idle argument value.
			Idle int
			// Game is the game argument value.
			Game string
		}
		// User holds details about calls to the User method.
		User []struct {
			// UserID is the userID argument value.
			UserID string
		}
		// VoiceStates holds details about calls to the VoiceStates method.
		VoiceStates []struct {
			// GuildID is the guildID argument value.
			GuildID string
		}
	}
}

// ChannelMessageSend calls ChannelMessageSendFunc.
func (mock *SessionMock) ChannelMessageSend(guildID string, channelID string) (*Message, error) {
	if mock.ChannelMessageSendFunc == nil {
		panic("SessionMock.ChannelMessageSendFunc: method is nil but Session.ChannelMessageSend was just called")
	}
	callInfo := struct {
		GuildID   string
		ChannelID string
	}{
		GuildID:   guildID,
		ChannelID: channelID,
	}
	lockSessionMockChannelMessageSend.Lock()
	mock.calls.ChannelMessageSend = append(mock.calls.ChannelMessageSend, callInfo)
	lockSessionMockChannelMessageSend.Unlock()
	return mock.ChannelMessageSendFunc(guildID, channelID)
}

// ChannelMessageSendCalls gets all the calls that were made to ChannelMessageSend.
// Check the length with:
//     len(mockedSession.ChannelMessageSendCalls())
func (mock *SessionMock) ChannelMessageSendCalls() []struct {
	GuildID   string
	ChannelID string
} {
	var calls []struct {
		GuildID   string
		ChannelID string
	}
	lockSessionMockChannelMessageSend.RLock()
	calls = mock.calls.ChannelMessageSend
	lockSessionMockChannelMessageSend.RUnlock()
	return calls
}

// ChannelVoiceJoin calls ChannelVoiceJoinFunc.
func (mock *SessionMock) ChannelVoiceJoin(guildID string, channelID string, mute bool, deaf bool) (soundplayer.VC, error) {
	if mock.ChannelVoiceJoinFunc == nil {
		panic("SessionMock.ChannelVoiceJoinFunc: method is nil but Session.ChannelVoiceJoin was just called")
	}
	callInfo := struct {
		GuildID   string
		ChannelID string
		Mute      bool
		Deaf      bool
	}{
		GuildID:   guildID,
		ChannelID: channelID,
		Mute:      mute,
		Deaf:      deaf,
	}
	lockSessionMockChannelVoiceJoin.Lock()
	mock.calls.ChannelVoiceJoin = append(mock.calls.ChannelVoiceJoin, callInfo)
	lockSessionMockChannelVoiceJoin.Unlock()
	return mock.ChannelVoiceJoinFunc(guildID, channelID, mute, deaf)
}

// ChannelVoiceJoinCalls gets all the calls that were made to ChannelVoiceJoin.
// Check the length with:
//     len(mockedSession.ChannelVoiceJoinCalls())
func (mock *SessionMock) ChannelVoiceJoinCalls() []struct {
	GuildID   string
	ChannelID string
	Mute      bool
	Deaf      bool
} {
	var calls []struct {
		GuildID   string
		ChannelID string
		Mute      bool
		Deaf      bool
	}
	lockSessionMockChannelVoiceJoin.RLock()
	calls = mock.calls.ChannelVoiceJoin
	lockSessionMockChannelVoiceJoin.RUnlock()
	return calls
}

// GetMe calls GetMeFunc.
func (mock *SessionMock) GetMe() (*User, error) {
	if mock.GetMeFunc == nil {
		panic("SessionMock.GetMeFunc: method is nil but Session.GetMe was just called")
	}
	callInfo := struct {
	}{}
	lockSessionMockGetMe.Lock()
	mock.calls.GetMe = append(mock.calls.GetMe, callInfo)
	lockSessionMockGetMe.Unlock()
	return mock.GetMeFunc()
}

// GetMeCalls gets all the calls that were made to GetMe.
// Check the length with:
//     len(mockedSession.GetMeCalls())
func (mock *SessionMock) GetMeCalls() []struct {
} {
	var calls []struct {
	}
	lockSessionMockGetMe.RLock()
	calls = mock.calls.GetMe
	lockSessionMockGetMe.RUnlock()
	return calls
}

// HasSendMessagePermission calls HasSendMessagePermissionFunc.
func (mock *SessionMock) HasSendMessagePermission(userID string, channelID string) bool {
	if mock.HasSendMessagePermissionFunc == nil {
		panic("SessionMock.HasSendMessagePermissionFunc: method is nil but Session.HasSendMessagePermission was just called")
	}
	callInfo := struct {
		UserID    string
		ChannelID string
	}{
		UserID:    userID,
		ChannelID: channelID,
	}
	lockSessionMockHasSendMessagePermission.Lock()
	mock.calls.HasSendMessagePermission = append(mock.calls.HasSendMessagePermission, callInfo)
	lockSessionMockHasSendMessagePermission.Unlock()
	return mock.HasSendMessagePermissionFunc(userID, channelID)
}

// HasSendMessagePermissionCalls gets all the calls that were made to HasSendMessagePermission.
// Check the length with:
//     len(mockedSession.HasSendMessagePermissionCalls())
func (mock *SessionMock) HasSendMessagePermissionCalls() []struct {
	UserID    string
	ChannelID string
} {
	var calls []struct {
		UserID    string
		ChannelID string
	}
	lockSessionMockHasSendMessagePermission.RLock()
	calls = mock.calls.HasSendMessagePermission
	lockSessionMockHasSendMessagePermission.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *SessionMock) UpdateStatus(idle int, game string) error {
	if mock.UpdateStatusFunc == nil {
		panic("SessionMock.UpdateStatusFunc: method is nil but Session.UpdateStatus was just called")
	}
	callInfo := struct {
		Idle int
		Game string
	}{
		Idle: idle,
		Game: game,
	}
	lockSessionMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockSessionMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(idle, game)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedSession.UpdateStatusCalls())
func (mock *SessionMock) UpdateStatusCalls() []struct {
	Idle int
	Game string
} {
	var calls []struct {
		Idle int
		Game string
	}
	lockSessionMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockSessionMockUpdateStatus.RUnlock()
	return calls
}

// User calls UserFunc.
func (mock *SessionMock) User(userID string) (*User, error) {
	if mock.UserFunc == nil {
		panic("SessionMock.UserFunc: method is nil but Session.User was just called")
	}
	callInfo := struct {
		UserID string
	}{
		UserID: userID,
	}
	lockSessionMockUser.Lock()
	mock.calls.User = append(mock.calls.User, callInfo)
	lockSessionMockUser.Unlock()
	return mock.UserFunc(userID)
}

// UserCalls gets all the calls that were made to User.
// Check the length with:
//     len(mockedSession.UserCalls())
func (mock *SessionMock) UserCalls() []struct {
	UserID string
} {
	var calls []struct {
		UserID string
	}
	lockSessionMockUser.RLock()
	calls = mock.calls.User
	lockSessionMockUser.RUnlock()
	return calls
}

// VoiceStates calls VoiceStatesFunc.
func (mock *SessionMock) VoiceStates(guildID string) ([]*VoiceState, error) {
	if mock.VoiceStatesFunc == nil {
		panic("SessionMock.VoiceStatesFunc: method is nil but Session.VoiceStates was just called")
	}
	callInfo := struct {
		GuildID string
	}{
		GuildID: guildID,
	}
	lockSessionMockVoiceStates.Lock()
	mock.calls.VoiceStates = append(mock.calls.VoiceStates, callInfo)
	lockSessionMockVoiceStates.Unlock()
	return mock.VoiceStatesFunc(guildID)
}

// VoiceStatesCalls gets all the calls that were made to VoiceStates.
// Check the length with:
//     len(mockedSession.VoiceStatesCalls())
func (mock *SessionMock) VoiceStatesCalls() []struct {
	GuildID string
} {
	var calls []struct {
		GuildID string
	}
	lockSessionMockVoiceStates.RLock()
	calls = mock.calls.VoiceStates
	lockSessionMockVoiceStates.RUnlock()
	return calls
}
